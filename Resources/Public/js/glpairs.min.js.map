{"version":3,"file":"Resources/Public/js/glpairs.min.js","sources":["Resources/Public/js/glpairs.js"],"names":["GlPairs","i_strUniqueId","registerCardEvents","l_strMainDivId","getMainDivId","jQuery","find","each","$l_objCurrentAnchor","this","click","i_objEvent","glpairsEventHandler","m_strPairsId","l_strID","getIdArrayFromId","i_strId","l_intStrPos","l_objResult","pairsId","extId","area","suffix","indexOf","substr","toggleClassOfCardElement","i_intExtId","i_strArea","i_strCardElement","i_blnToFront","$l_objCardElement","l_strCardDivId","l_fltTurnDuration","getIdFromExtId","Math","round","m_intTurnDuration","css","transform","-moz-transform","-ms-transform","-o-transform","-webkit-transform","isClickAllowed","i_objElementId","l_blnReturn","m_objClickedCardParams","upperCardChoosed","lowerCardChoosed","upperExtId","lowerExtId","m_blnSplitmode","C_STR_AREA_UPPER","getModalHtmlElement","m_objI18n","errorWrongCardClickedUpper","modal","C_STR_AREA_LOWER","errorWrongCardClickedLower","checkForCorrectPair","setChoosenIndicator","m_arrExtIdMapping","C_STR_CARD_BORDER_CLASS_RIGHT","C_STR_CARD_BORDER_CLASS_WRONG","m_objFinalInformation","isActive","window","setTimeout","showFinalInformation","setClickableOverlayDiv","i_objFIData","i_blnForTestMode","l_strContent","$l_objModalBox","getSelectedPictureHtmlContent","content","getModalHtmlElementFinalInformation","height","width","show","on","afterPairProcessing","$l_objPictureElement","l_strHtmlContent","l_strArea","m_intPairsType","C_INT_PAIRS_TYPE_TextOnly","C_STR_ID_SUFFIX_FRONT_CARD","length","prop","getPictureHtmlContent","C_INT_PAIRS_TYPE_SamePic","getCorrespondingArea","$i_objPicture","$l_objPictureElementNew","clone","removeClass","attr","picwidth","picheight","i_strNewClass","$l_currentElement","l_strCurrentArea","blinkBorder","i_strSuffix","$i_obj_card","i_strTargetClass","counter","toggleClass","C_STR_CARD_BORDER_CLASS_DEFAULT","i_strEventHandler","$l_objMainDiv","$l_objOverlayDiv","id","style","position","top","left","append","m_intTurnbackDelay","m_TimeoutOverlayClick","trigger","m_intClickHintDelay","m_TimeoutClickHint","showAnimatedClickHint","turnBackCards","$l_objBorderElement","l_strCurrentBorderClass","flipOverCard","setResultOfGame","i_intValue","$l_objResult","l_strResultID","l_intCurrentValue","C_STR_ID_SUFFIX_RESULT","parseInt","text","getResultOfGame","initializeClickedCardParams","animateCard2Stack","$i_objCard","$l_objCardStack","l_intOffsetTop","l_intOffsetLeft","l_fltRandomOffsetTop","l_fltRandomOffsetLeft","l_intCardstackOffset","l_intCardOffset","C_STR_ID_SUFFIX_CARD_STACK","getRandomNumber4Animation","offset","animate","duration","m_intMoveStackDuration","easing","turnCard","l_fltDegrees","random","gameFinishedDialog","l_strDialog","gameFinished","replace","l_fltRandom","$l_objDialog","l_intLeft","l_intDuration","C_STR_ID_SUFFIX_CLICK_HINT","class","html","clickHint","opacity","remove","unregisterEventsConditional","C_STR_ID_SUFFIX_CARD_OVERALL","unbind","setTurnBackEvents","$l_objCardBackFirst","$l_objCardBackSecond","C_STR_ID_SUFFIX_BACK","performTestMode","l_arrCardIds","l_objElementId","$l_objCurrentCardContainer","push","turnAllCards","i_arrCardIds","testmode","shift","m_intTestModeTurnDelay","initializeGlobals","l_intExtId","hasOwnProperty","m_objCardTurnState","$l_objFrontside","C_STR_ID_SUFFIX_FRONT","m_intPointsPlus","m_intPairsCount","m_intPointsMinus","getCorrespondingExtId","i_strExtId","l_intUId","m_arrUidMapping","C_STR_ARR_ID_EXT_ID1","C_STR_ARR_ID_EXT_ID2","setCorrespondingChoosedCards","i_strContent","join","i_strImages","i_intHeight","i_intWidth","l_strSize","l_strHeight","l_strWidth","arrPairs","m_blnAjaxMode","m_blnTestMode","requestAjaxGeneralPairsData","strGetParams","param","controllerName","actionName","actionArguments","i_strUniquId","setAjaxWaitParams","ajax","url","dataType","done","i_jsonResult","glpairsHandleAjaxResponse","processAjaxGeneralPairsData","result","arrExtIdMap","arrUidMap","pairsType","splitmode","i18n","pairscount","pluspoints","minuspoints","turnbackdelay","hintdelay","turnduration","stackduration","testmodeturndelay","finalinformation","i_blnSet","l_strMainDivID","onMouseClickCard","$i_objCurrentCard","onMouseClickOverlayPairFinished","$i_objOverlay","$l_objClickHint","clearTimeout","onTurnBackCardEnd","$i_objBackCard","C_INT_PAIRS_TYPE_2Pic","C_INT_PAIRS_TYPE_PicText","C_STR_ID_SUFFIX_TD_CONTAINER","C_STR_ID_SUFFIX_IMG_BACK","glpairsInit","i_arrPairsUniqueIds","i_intIndex","objPairs","i_strResponseFunc","strUniqueId","i_intUniqueId","i_strHandler","$i_objCurrentElement","arrGlpairsIds"],"mappings":"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","sourcesContent":["/***************************************************************\r\n *  Copyright notice\r\n *\r\n *  (c) 2014 Gerald Loß\r\n *  All rights reserved \r\n *\r\n *  This script is part of the TYPO3 project. The TYPO3 project is\r\n *  free software; you can redistribute it and/or modify\r\n *  it under the terms of the GNU General Public License as published by\r\n *  the Free Software Foundation; either version 3 of the License, or\r\n *  (at your option) any later version.\r\n *\r\n *  The GNU General Public License can be found at\r\n *  http://www.gnu.org/copyleft/gpl.html.\r\n *\r\n *  This script is distributed in the hope that it will be useful,\r\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n *  GNU General Public License for more details.\r\n *\r\n *  This copyright notice MUST APPEAR in all copies of the script!\r\n ***************************************************************/\r\n// some JSHint options\r\n// some global variables we don't need to define here\r\n/*global jQuery:false */\r\n/*global window:false */\r\n\r\n/**\r\n * The main pairs class\r\n * \r\n * @author Gerald Loß\r\n * @Class \tGLPairs \tThe main pairs functions on the client side.\r\n * @constructor\r\n * @param {string}\tUnique ID of the pairs game. It consist of a prefix with the content element ID\r\n * \t\t\t\t\tand a suffix with the uID of the pairs game separated bei an underscore (e.g. 88_234) \r\n */\r\nfunction GlPairs(i_strUniqueId) {\r\n\t// turn on the strict mode\r\n\t\"use strict\";\r\n\t\r\n\t// ***************************************************************/\r\n\t// Constructor code and definition of the member attributes \r\n\t// of this class\r\n\t// ***************************************************************/\r\n\r\n\t// store this object in the static array\r\n\tGlPairs.arrPairs[i_strUniqueId] = this;\r\n\t\r\n\t/**\r\n\t * store the Pairs ID in a private variable.\r\n\t * It consist of a prefix with the content element ID and a suffix with \r\n\t * the uID of the pairs game separated bei an underscore (e.g. 88_234)  */\r\n\tvar m_strPairsId = i_strUniqueId; \r\n\r\n\t/**\r\n\t * Ajax mode, if this flag is true, then we waiting for an ajax request*/\r\n\tvar m_blnAjaxMode = false;\r\n\t\r\n\t/**\r\n     * Object with the mapping from external ID to the uID\r\n     * First Index: \tThe external ID of the Pair\r\n     * Value:\t\t\tThe uID of the Pair\r\n     * \r\n     * @var array\r\n\t */\r\n\tvar m_arrExtIdMapping = null;\r\n\t\r\n\t/**\r\n     * Object with the status of every card if currently is shown the frontside or backside\r\n     * First Index: \tThe external ID of the Pair\r\n     * Value:\t\t\ttrue for frontside or false for backside\r\n     * \r\n     * @var array\r\n\t */\r\n\tvar m_objCardTurnState = {};\r\n\r\n\t/**\r\n     * Object with the mapping from the uID to the external ID \r\n     * First Index: \tThe uID of the Pair\r\n     * Value:\tarray with 2 dimensions (see constants with prefix C_STR_ARR_ID_EXT_ID):\r\n     * \t\t  extID1: \tThe extID1 of the pair\r\n     * \t\t  extID2: \tThe extID2 of the pair\r\n     * @var array\r\n     */\r\n    var m_arrUidMapping = null;\r\n    \r\n    /**\r\n     * Object with the final information data.\r\n     * \t \tIndex: The uID of the Pair\r\n\t * \t\tValue: Array(\r\n\t * \t\t\t  isActive  => True if the final information is activated\r\n\t * \t\t\t  content   => HTML content with the final information\r\n\t * \t\t\t  width     => The width of the final information\r\n\t * \t\t\t  height    => The height of the final information\r\n\t * \t\t\t  picwidth  => The width of the picture(s)\r\n\t * \t\t\t  picheight => The height of the picture(s)\r\n\t *  \t\t)\r\n     */\r\n    var m_objFinalInformation = null;\r\n    \r\n    /**\r\n     * The Type of the pairs game. See the constants with the prefix C_INT_PAIRS_TYPE*\r\n     * @var string\r\n     */\r\n    var m_intPairsType = '';\r\n    \r\n    /**\r\n     * Flag if we are in splitmode. Splitmode means all card pairs are separated.\r\n     * The first cards of the pairs are in the upper area and the second card of \r\n     * the pairs are in the lower area of the html screen.\r\n     * @var boolean\r\n     */\r\n    var m_blnSplitmode = false;\r\n    \r\n    /**\r\n     * Object with all localized strings for this frontend.\r\n     * See Method PairsController->getI18nFrontendValues() for all values in this object.\r\n     */\r\n    var m_objI18n = null;\r\n    \r\n    /**\r\n     * Object with all parameters for the choosed cards in the game.\r\n     * If we are not in splitmode, then it dont cares of upper and lower card. \r\n     * The upper card is then always the first and the lower card is always the second \r\n     * choosed card.\r\n     * \r\n     * The following parameters are available:\r\n     * upperCardChoosed:\tTrue if the first card is choosed\r\n     * lowerCardChoosed:\tTrue if the second card is choosed\r\n     * upperExtId:\t\t\tExtId of the upper choosed card\r\n     * lowerExtId:\t\t\tExtId of the lower choosed card\r\n     */\r\n    var m_objClickedCardParams = {\tupperCardChoosed\t:\tfalse,\r\n    \t\t\t\t\t\t\t\tlowerCardChoosed\t:\tfalse,\r\n    \t\t\t\t\t\t\t\tupperExtId\t\t\t: \t0,\r\n    \t\t\t\t\t\t\t\tlowerExtId\t\t\t:\t0\t};\r\n    \r\n    /**\r\n     * Handler for the timeout for the overlay div and its click event.\r\n     * With this variable we can cancel the timeout, if the user click\r\n     * by himself on the overlay div.\r\n     */\r\n    var m_TimeoutOverlayClick = null;\r\n    \r\n    /**\r\n     * Handler for the timeout for the anmiation with a hint\r\n     * that the user has to click for going on after he has choose\r\n     * two cards.\r\n     */\r\n    var m_TimeoutClickHint = null;\r\n\r\n    /**\r\n     * The number of pairs in this pairs game.\r\n     */\r\n    var m_intPairsCount = 0;\r\n    \r\n    /**\r\n     * Milliseconds after then the cards turn back automatically, if you have choosed two cards\r\n     */\r\n    var m_intTurnbackDelay = 20000;\r\n    \r\n    /**\r\n     * Milliseconds after then hint apears, that the user has to click for going on\r\n     */\r\n    var m_intClickHintDelay = 10000;\r\n    \r\n    /**\r\n     * Miliseconds for the turn animation of the cards\r\n     */\r\n    var m_intTurnDuration = 500;\r\n    \r\n    /**\r\n     * Miliseconds for the animation of the move of the cards to the stack\r\n     */\r\n    var m_intMoveStackDuration = 500;\r\n    \r\n    /**\r\n     * The Points for a correct choice\r\n     */\r\n    var m_intPointsPlus = 5;\r\n    \r\n    /**\r\n     * The Points for a wrong choice\r\n     */\r\n    var m_intPointsMinus = 1;\r\n    \r\n    /**\r\n     * Flag if test mode is activated.\r\n     */\r\n    var m_blnTestMode = false;\r\n    \r\n    /**\r\n     * Delay between every turn of the cards in the test mode.\r\n     */\r\n    var m_intTestModeTurnDelay = 0;\r\n\r\n    // ***************************************************************/\r\n\t// Public or privileged function part\r\n\t// ***************************************************************/\r\n\t\r\n\t\r\n\t/**\r\n\t * request with AJAX all ID Mappings\r\n\t * \r\n\t * @function\r\n\t */\r\n\tthis.requestAjaxGeneralPairsData = function() {\r\n\t\t\r\n\t\t// send the ajax action 'ajaxBasicData' to the backend\r\n\t\t// with this function will be collected all general data for the pairs game\r\n\t\tvar strGetParams = jQuery.param({ controllerName  : 'Pairs',\r\n\t\t\t\t\t\t\t\t\t\t  actionName\t  : 'ajaxBasicData',\r\n\t\t\t\t\t\t\t\t\t\t  actionArguments : { i_strUniquId : m_strPairsId }\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t// set the ajax mode\r\n\t\tthis.setAjaxWaitParams(true);\r\n\t\t// start the inital ajax request\r\n\t\tjQuery.ajax({\r\n\t\t\turl: '/?eID=glpairs&' + strGetParams,\r\n\t\t\tdataType: 'json'\r\n\t\t\t}).done( function(i_jsonResult){\r\n\t\t\t\t\t\t\tGlPairs.glpairsHandleAjaxResponse(\"processAjaxGeneralPairsData\", i_jsonResult);\r\n\t\t\t\t\t\t}\r\n\t\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t *  handler for the Ajax answer with all pairs ID Mappings\r\n\t *  \r\n\t * @function\r\n\t * @param {Object}\ti_jsonResult\tThe received json data.\r\n\t */\r\n\tthis.processAjaxGeneralPairsData = function(i_jsonResult) {\r\n\t\t// retrieve the mappings from external ID to uID\r\n\t\tm_arrExtIdMapping = i_jsonResult.result.arrExtIdMap;\r\n\t\t// mapping from uID to external ID\r\n\t\tm_arrUidMapping = i_jsonResult.result.arrUidMap;\r\n\t\t// and the pairs type\r\n\t\tm_intPairsType = i_jsonResult.result.pairsType;\r\n\t\t// the splitmode of the game\r\n\t\tm_blnSplitmode = i_jsonResult.result.splitmode;\r\n\t\t// the localized strings for the frontend\r\n\t\tm_objI18n = i_jsonResult.result.i18n;\r\n\t\t// the number of pairs in the game\r\n\t\tm_intPairsCount = i_jsonResult.result.pairscount;\r\n\t\t\r\n\t\t// set the parameters from the backend\r\n\t\tm_intPointsPlus = i_jsonResult.result.pluspoints;\r\n\t\tm_intPointsMinus = i_jsonResult.result.minuspoints;\r\n\t\tm_intTurnbackDelay = i_jsonResult.result.turnbackdelay;\r\n\t\tm_intClickHintDelay = i_jsonResult.result.hintdelay;\r\n\t\tm_intTurnDuration = i_jsonResult.result.turnduration;\r\n\t\tm_intMoveStackDuration = i_jsonResult.result.stackduration;\r\n\t\tm_blnTestMode = i_jsonResult.result.testmode;\r\n\t\tm_intTestModeTurnDelay = i_jsonResult.result.testmodeturndelay;\r\n\t\tm_objFinalInformation = i_jsonResult.result.finalinformation;\r\n\t\t\r\n\t\t// initialize some global values\r\n\t\tinitializeGlobals();\r\n\t\t\r\n\t\t// if we are in test mode\r\n\t\tif (m_blnTestMode) {\r\n\t\t\tperformTestMode();\r\n\t\t} \r\n\r\n\t\t// register the events for the card elements\r\n\t\tregisterCardEvents();\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Set the wait mouse cursor for the whole pairs game and some other parameters\r\n\t * \r\n\t * @function\r\n\t * @memberOf GLPairs\r\n\t * @param\ti_blnSet\t{boolean}\tIf True then set the Wait parameters, if false then unset.\r\n\t */\r\n\tthis.setAjaxWaitParams = function(i_blnSet) {\r\n\t\t\r\n\t\t// the ID of the main div container\r\n\t\tvar l_strMainDivID =\"\";\r\n\t\t\r\n\t\t// get the ID\r\n\t\tl_strMainDivID = getMainDivId();\r\n\t\t\r\n\t\t// if set the wait parameters\r\n\t\tif (i_blnSet === true) {\r\n\t\t\t// set the wait cursor for the mouse\r\n\t\t\tjQuery(l_strMainDivID).css(\"cursor\", \"wait\");\r\n\t\t\t// set the ajax mode\r\n\t\t\tm_blnAjaxMode = true;\r\n\t\t}\r\n\t\t\r\n\t\t// if unset the wait parameters\r\n\t\telse {\r\n\t\t\t// unset the ajax mode\r\n\t\t\tm_blnAjaxMode = false;\r\n\t\t\t// unset the wait cursor for the mouse\r\n\t\t\tjQuery(l_strMainDivID).css(\"cursor\", \"auto\");\r\n\t\t}\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Handle the mouse click event on a card of the pairs game.\r\n\t * \r\n\t * @function\r\n\t * @param {object}\ti_objEvent\t\t\t\tEvent object with the data of the event.\r\n\t * @param {object}\t$i_objCurrentCard\tCurrent card which has received the click event.\r\n\t */\r\n\tthis.onMouseClickCard = function(i_objEvent, $i_objCurrentCard) {\r\n\t\t// object with the content element uID and the internal ID\r\n\t\tvar l_objElementId = {};\r\n\t\t\r\n\t\tl_objElementId = getIdArrayFromId($i_objCurrentCard.attr('id'));\r\n\t\t\r\n\t\t// if we are in test mode\r\n\t\t// and this pair has a final information\r\n\t\tif (m_blnTestMode &&\r\n\t\t\tm_objFinalInformation[m_arrExtIdMapping[l_objElementId.extId]].isActive) {\r\n\t\t\t\r\n\t\t\t// set the global variables with the booth choosed cards\r\n\t\t\tsetCorrespondingChoosedCards(l_objElementId);\r\n\t\t\t\r\n\t\t\t// show the final information\r\n\t\t\tshowFinalInformation(m_objFinalInformation[m_arrExtIdMapping[l_objElementId.extId]], m_blnTestMode);\t\r\n\t\t\t\t\r\n\t\t\t// initialize the global atttribute with the currently chosed cards\r\n\t\t\tinitializeClickedCardParams();\r\n\r\n\t\t}\r\n\t\t// if we are in test mode\r\n\t\t// and this pair has no final information\r\n\t\telse if (m_blnTestMode &&\r\n\t\t\tm_objFinalInformation[m_arrExtIdMapping[l_objElementId.extId]].isActive === false) {\r\n\t\t\t\r\n\t\t\t// flip over the card\r\n\t\t\tflipOverCard(l_objElementId.extId, l_objElementId.area ); \r\n\t\t\tflipOverCard(getCorrespondingExtId(l_objElementId.extId), getCorrespondingArea(l_objElementId.area) ); \r\n\t\t\r\n\t\t}\r\n\t\t// if the click on this card was allowed\r\n\t\telse if (isClickAllowed(l_objElementId)){\r\n\t\t\t\r\n\t\t\t// unregister the click events if two correct cards are choosed\r\n\t\t\tunregisterEventsConditional();\r\n\t\t\t\r\n\t\t\t// flip over the card\r\n\t\t\tflipOverCard(l_objElementId.extId, l_objElementId.area ); \r\n\t\t\t\r\n\t\t\t// check if the choosen pair is correct\r\n\t\t\tcheckForCorrectPair();\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * Handle the mouse click event on the overlay div after the both cards are choosen.\r\n\t * \r\n\t * @function\r\n\t * @param {object}\ti_objEvent\t\t\t\tEvent object with the data of the event.\r\n\t * @param {object}\t$$i_objOverlay\t\t\tThe averlay div which has received the click event.\r\n\t */\r\n\tthis.onMouseClickOverlayPairFinished = function(i_objEvent, $i_objOverlay) {\r\n\t\t\r\n\t\t// the click hint element\r\n\t\tvar $l_objClickHint = null;\r\n\r\n\t\t\r\n\t\t// first cancel timeout if this is an user click\r\n\t\twindow.clearTimeout(m_TimeoutOverlayClick);\r\n\t\twindow.clearTimeout(m_TimeoutClickHint);\r\n\t\t\r\n\t\t// destroy the overlay again\r\n\t\t$i_objOverlay.remove();\r\n\t\t\r\n\t\t// if the animation with the cklick hint is already running, \r\n\t\t// then try to stop it now\r\n\t\t$l_objClickHint = jQuery('#' + m_strPairsId + '_' + GlPairs.C_STR_ID_SUFFIX_CLICK_HINT);\r\n\t\t$l_objClickHint.remove();\r\n\t\t\r\n\t\t// do the after pair processing\r\n\t\tafterPairProcessing();\r\n\t};\r\n\r\n\t/**\r\n\t * The event of the end of the turn back of the cards. This event is only registerd if\r\n\t * two correct cards are choosen. In this case must the both cards moved to the card stack\r\n\t * after the turn back animation is finished.\r\n\t * \r\n\t * @function\r\n\t * @param {object}\ti_objEvent\t\t\t\tEvent object with the data of the event.\r\n\t * @param {object}\t$i_objBackCard\t\t\tThe back card which should be moved to the card stack\r\n\t */\r\n\tthis.onTurnBackCardEnd = function(i_objEvent, $i_objBackCard) {\r\n\t\t\r\n\t\t// animate the card to the stack\r\n\t\tanimateCard2Stack($i_objBackCard);\r\n\t};\r\n\t\r\n\t// ***************************************************************/\r\n\t// Private function part\r\n\t// ***************************************************************/\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_registerCardEvents() {}\r\n\t\r\n\t/**\r\n\t * Regsiter with jQuery all Events for the cards.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction registerCardEvents(){\r\n\t\t// the ID of the main div element container for this pairs game\r\n\t\tvar l_strMainDivId = '';\r\n\t\t\r\n\t\tl_strMainDivId = getMainDivId();\r\n\t\t\r\n\t\t// select all elements of this pairs container and filter\r\n\t\t// for all anchor elements of the cards\r\n\t\tjQuery(l_strMainDivId).find(\".glpairs_cls_click_content\").each(\r\n\t\t\tfunction(i_intIndex){\r\n\t\t\t\t// the current anchor element\r\n\t\t\t\tvar $l_objCurrentAnchor = jQuery(this);\r\n\t\t\t\t\r\n\t\t\t\t// register the mouse click event\r\n\t\t\t\t$l_objCurrentAnchor.click(\r\n\t\t\t\t\tfunction(i_objEvent){\r\n\t\t\t\t\t\t// call the event handler which delegates the request to the actual handler\r\n\t\t\t\t\t\tGlPairs.glpairsEventHandler(m_strPairsId, i_objEvent, 'onMouseClickCard', $l_objCurrentAnchor);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\r\n\t\t);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getMainDivId() {}\r\n\t\r\n\t/**\r\n\t * Returns the ID of the main div container which contains the whole pairs game\r\n\t * with a # prefix for jQuery\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction getMainDivId(){\r\n\t\t\r\n\t\t// the ID of the main div container\r\n\t\tvar l_strID =\"\";\r\n\t\t\r\n\t\tl_strID = \"#\" + m_strPairsId + \"_glpairs_container\";\r\n\t\treturn l_strID;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getIdArrayFromId() {}\r\n\t\r\n\t/**\r\n\t * Returns an array with the id prefix of an HTML element ID.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * @return {object}\tObject with four elements\r\n\t * \t\t\t\t\t\tpairsId:\tID for the content element of the whole pairs game\r\n\t * \t\t\t\t\t\textId:\t\tinternal Id of the card\r\n\t * \t\t\t\t\t\tarea:\t\tweather we are in the lower or upper area\r\n\t * \t\t\t\t\t\tsuffix:\t\tthe suffix of the ID\r\n\t */\r\n\tfunction getIdArrayFromId(i_strId){\r\n\t\t// the position in the string\r\n\t\tvar l_intStrPos = 0;\r\n\t\t// the returning object\r\n\t\tvar l_objResult = { 'pairsId': \t0,\r\n\t\t\t\t\t\t\t'extId':\t0,\r\n\t\t\t\t\t\t\t'area':\t\t'',\r\n\t\t\t\t\t\t\t'suffix':\t''};\r\n\t\t\r\n\t\t// get the Pairs ID ****************************************************************\r\n\t\t// get the position of the first underscore\r\n\t\tl_intStrPos = i_strId.indexOf('_');\r\n\t\t// get the pairs ID\r\n\t\tl_objResult.pairsId = i_strId.substr(0, l_intStrPos);\r\n\t\tl_intStrPos++;\r\n\t\t// delete the prefix with the pairs ID\r\n\t\ti_strId = i_strId.substr(l_intStrPos);\r\n\t\t// get the position of the first underscore\r\n\t\tl_intStrPos = i_strId.indexOf('_');\r\n\t\t// get the internal ID\r\n\t\tl_objResult.pairsId = l_objResult.pairsId + '_' + i_strId.substr(0, l_intStrPos);\r\n\r\n\t\t// get the external ID **************************************************************\r\n\t\tl_intStrPos++;\r\n\t\t// delete the prefix with the pairs ID\r\n\t\ti_strId = i_strId.substr(l_intStrPos);\r\n\t\t// get the position of the first underscore\r\n\t\tl_intStrPos = i_strId.indexOf('_');\r\n\t\t// get the internal ID\r\n\t\tl_objResult.extId = i_strId.substr(0, l_intStrPos);\r\n\r\n\t\t// get the area *********************************************************************\r\n\t\tl_intStrPos++;\r\n\t\t// delete the prefix with the internal ID\r\n\t\ti_strId = i_strId.substr(l_intStrPos);\r\n\t\t// get the position of the first underscore\r\n\t\tl_intStrPos = i_strId.indexOf('_');\r\n\t\t// get the area\r\n\t\tl_objResult.area = i_strId.substr(0, l_intStrPos);\r\n\r\n\t\t// get the suffix ********************************************************************\r\n\t\tl_intStrPos++;\r\n\t\t// the remaining is the suffix\r\n\t\tl_objResult.suffix = i_strId.substr(l_intStrPos);\r\n\t\t\r\n\t\t// return the result\r\n\t\treturn l_objResult;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_toggleClassOfCardElement() {}\r\n\t\r\n\t/**\r\n\t * Returns an array with the id prefix of an HTML element ID.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * @param integer\ti_intExtID\t\t\tThe external ID of the card.\r\n\t * @param string\ti_strArea\t\t\tThe area of the card. Upper or lower area is possible.\r\n\t * @param string \ti_strCardElement\tElement of the card (back or front)\r\n\t * @param boolean\ti_blnToFront\t\tTrue if the element should turn to the front else to the back\r\n\t */\r\n\tfunction toggleClassOfCardElement(i_intExtId, i_strArea, i_strCardElement, i_blnToFront){\r\n\t\t// a card element\r\n\t\tvar $l_objCardElement = null;\r\n\t\t// id of the div element of a card\r\n\t\tvar l_strCardDivId = '';\r\n\t\t// the turn duration in seconds\r\n\t\tvar l_fltTurnDuration = 0;\r\n\t\t\r\n\t\t// build the ID of the cardelement\r\n\t\tl_strCardDivId = getIdFromExtId(i_intExtId, i_strArea, i_strCardElement);\r\n\t\t\r\n\t\t// get the div element with the ID\r\n\t\t$l_objCardElement = jQuery(l_strCardDivId);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// set the duration in seconds\r\n\t\tl_fltTurnDuration = Math.round( m_intTurnDuration / 100 );\r\n\t\tl_fltTurnDuration = l_fltTurnDuration / 10;\r\n\t\t$l_objCardElement.css('transition', 'all ' + l_fltTurnDuration + 's');\r\n\t\t\r\n\r\n\t\t// if the turn to the front side is demanded \r\n\t\tif ( i_blnToFront){\r\n\t\t\t// turn to frontside\r\n\t\t\t$l_objCardElement.css({'transform' : 'rotateY( 0deg )',\r\n\t\t\t\t\t\t\t\t  '-moz-transform' : 'rotateY( 0deg )',\r\n\t\t\t\t\t\t\t\t  '-ms-transform' : 'rotateY( 0deg )',\r\n\t\t\t\t\t\t\t\t  '-o-transform' : 'rotateY( 0deg )',\r\n\t\t\t\t\t\t\t\t  '-webkit-transform' : 'rotateY( 0deg )'});\r\n\t\t} else {\r\n\t\t\t// turn to backside\r\n\t\t\t$l_objCardElement.css({'transform' : 'rotateY( 180deg )',\r\n\t\t\t\t\t\t\t\t   '-moz-transform' : 'rotateY( 180deg )',\r\n\t\t\t\t\t\t\t\t   '-ms-transform' : 'rotateY( 180deg )',\r\n\t\t\t\t\t\t\t\t   '-o-transform' : 'rotateY( 180deg )',\r\n\t\t\t\t\t\t\t\t   '-webkit-transform' : 'rotateY( 180deg )'});\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_isClickAllowed() {}\r\n\t\r\n\t/**\r\n\t * Check if mouseclick of a card is in the current state allowed.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * @param {object}\ti_objElementId\t\tArray with three elements of the current clicked card.\r\n\t * \t\t\t\t\t\t\t\t\t\t\tpairsId:\tID for the content element of the whole pairs game\r\n\t * \t\t\t\t\t\t\t\t\t\t\textId:\t\tinternal Id of the card\r\n\t * \t\t\t\t\t\t\t\t\t\t\tarea:\t\tweather we are in the lower or upper area\r\n\t * \t\t\t\t\t\t\t\t\t\t\tsuffix:\t\tthe suffix of the ID\r\n\t * @return boolean\t\t\t\t\t\tTrue if the click was allowed\r\n\t */\r\n\tfunction isClickAllowed(i_objElementId){\r\n\t\t// the returning flag, it is by default true\r\n\t\tvar l_blnReturn = true;\r\n\t\t\r\n\t\t// if there are still two cards choosen\r\n\t\t// this could only happen if the user click very fast and often on the screen\r\n\t\tif ( m_objClickedCardParams.upperCardChoosed && \r\n\t\t\t\tm_objClickedCardParams.lowerCardChoosed ) {\r\n\r\n\t\t\t// do nothing\r\n\t\t\tl_blnReturn = false;\r\n\t\t\r\n\t\t// if the same card was clicked again\r\n\t\t} else if (   m_objClickedCardParams.upperExtId == i_objElementId.extId ||\r\n\t\t\t\t\t  m_objClickedCardParams.lowerExtId == i_objElementId.extId ){\r\n\t\t\t// do nothing\r\n\t\t\tl_blnReturn = false;\r\n\t\t\r\n\t\t// if we are in split mode\r\n\t\t} else if (m_blnSplitmode) {\r\n\t\t\t\r\n\t\t\t// if a card of the upper area is clicked\r\n\t\t\tif (i_objElementId.area == GlPairs.C_STR_AREA_UPPER ) {\r\n\t\t\t\t// if a card of the upper area is already choosed\r\n\t\t\t\tif (m_objClickedCardParams.upperCardChoosed){\r\n\t\t\t\t\t\r\n\t\t\t\t\t// return false\r\n\t\t\t\t\tl_blnReturn = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\t// start a error dialog\r\n\t\t\t\t\tjQuery(getModalHtmlElement(m_objI18n.errorWrongCardClickedUpper)).modal();\r\n\t\t\t\t\t\r\n\t\t\t\t// if no card of this area is choosed\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// remember this state and the external ID\r\n\t\t\t\t\tm_objClickedCardParams.upperCardChoosed = true;\r\n\t\t\t\t\tm_objClickedCardParams.upperExtId = i_objElementId.extId;\r\n\t\t\t\t}\r\n\r\n\t\t\t// if a card of the lower area is clicked\r\n\t\t\t} else if (i_objElementId.area == GlPairs.C_STR_AREA_LOWER ) {\r\n\t\t\t\t// if a card of the upper area is already choosed\r\n\t\t\t\tif (m_objClickedCardParams.lowerCardChoosed){\r\n\t\t\t\t\t// return false\r\n\t\t\t\t\tl_blnReturn = false;\r\n\t\t\t\t\t// start a error dialog\r\n\t\t\t\t\tjQuery(getModalHtmlElement(m_objI18n.errorWrongCardClickedLower)).modal();\r\n\r\n\t\t\t\t// if no card of this area is choosed\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// remember this state and the external ID\r\n\t\t\t\t\tm_objClickedCardParams.lowerCardChoosed = true;\r\n\t\t\t\t\tm_objClickedCardParams.lowerExtId = i_objElementId.extId;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t// if we are not in splitmode\r\n\t\t} else {\r\n\t\t\t\r\n\t\t\t// if already one card is choosed\r\n\t\t\tif (m_objClickedCardParams.upperCardChoosed) {\r\n\t\t\t\t// remember the second card\r\n\t\t\t\tm_objClickedCardParams.lowerCardChoosed = true;\r\n\t\t\t\tm_objClickedCardParams.lowerExtId = i_objElementId.extId;\r\n\r\n\t\t\t// if no card was already choosed\r\n\t\t\t} else {\r\n\t\t\t\t// remember the first card\r\n\t\t\t\tm_objClickedCardParams.upperCardChoosed = true;\r\n\t\t\t\tm_objClickedCardParams.upperExtId = i_objElementId.extId;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn l_blnReturn;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_checkForCorrectPair() {}\r\n\t\r\n\t/**\r\n\t * Check if there was choosen a correct pair of cards\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction checkForCorrectPair(){\r\n\t\t\r\n\t\t// if both cards are choosen\r\n\t\tif (m_objClickedCardParams.upperCardChoosed\t&& m_objClickedCardParams.lowerCardChoosed){\r\n\t\t\t\r\n\t\t\t// it is from the same pair\r\n\t\t\tif(m_arrExtIdMapping[m_objClickedCardParams.upperExtId] ==\r\n\t\t\t\t\t\t\t\t\t\t\t m_arrExtIdMapping[m_objClickedCardParams.lowerExtId]){\r\n\r\n\t\t\t\t// set the indicator for a correct choice\r\n\t\t\t\tsetChoosenIndicator(GlPairs.C_STR_CARD_BORDER_CLASS_RIGHT);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// if it is not from the same pair\r\n\t\t\telse {\r\n\t\t\t\t// set the indicator for a wrong choice\r\n\t\t\t\tsetChoosenIndicator(GlPairs.C_STR_CARD_BORDER_CLASS_WRONG);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// if the correct pair is choosed and the final information is activated\r\n\t\t\tif(m_arrExtIdMapping[m_objClickedCardParams.upperExtId] ==\r\n\t\t\t\t \t\t\t\t\t\t\t\tm_arrExtIdMapping[m_objClickedCardParams.lowerExtId] &&\r\n\t\t\t\tm_objFinalInformation[m_arrExtIdMapping[m_objClickedCardParams.upperExtId]].isActive){\r\n\t\t\t\t\r\n\t\t\t\t// show the final information for this pair, after the card is turn around\r\n\t\t\t\twindow.setTimeout( function(){\r\n\t\t\t\t\t\tshowFinalInformation(m_objFinalInformation[m_arrExtIdMapping[m_objClickedCardParams.upperExtId]]);},\r\n\t\t\t\t\t  \tm_intTurnDuration );\r\n\t\t\t\r\n\t\t\t// if final information is not activated or the wrong pairs is choosed\r\n\t\t\t} else {\r\n\t\t\t\t// create a transparent overlay div, where the user can cklick on it\r\n\t\t\t\t// for going on. The click event will transferred to the method\r\n\t\t\t\t// onMouseClickOverlayPairFinished()\r\n\t\t\t\t// this overlay will be created with some delay, after the turn of the cards is finished\r\n\t\t\t\t// if the user click to fast on this overlay while the turn is not over\r\n\t\t\t\t// we cannot calculate the location of the card properly for the animation\r\n\t\t\t\twindow.setTimeout( function(){setClickableOverlayDiv('onMouseClickOverlayPairFinished');},\r\n\t\t\t\t\t\t  \tm_intTurnDuration );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_ShowFinalInformation() {}\r\n\t\r\n\t/**\r\n\t * Show the final information of a correct pair.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param\tobject\ti_objFIData\tObject with the data of the final information.\r\n\t * \t\t\t\t\tisActive: \ttrue if final information is activated\r\n\t * \t\t\t\t\tcontent:\tThe content of the final information\r\n\t * \t\t\t\t\twidth:\t\tThe width of the final information\r\n\t * \t\t\t\t\theight:\t\tThe height of the final information\r\n\t * \t\t\t\t\tpicwidth:\tThe width of the picture(s)\r\n\t * \t\t\t\t\tpicheight:\tThe height of the picture(s)\r\n\t * @param \tboolean\ti_blnForTestMode\tTrue, if this is for the test mode\r\n\t */\r\n\tfunction showFinalInformation(i_objFIData, i_blnForTestMode){\r\n\t\t\r\n\t\t// if i_blnForTestMode is omited then false\r\n\t\t/**\r\n\t\t * @default false\r\n\t\t */\r\n\t\ti_blnForTestMode = typeof i_blnForTestMode == 'undefined' ? false : i_blnForTestMode;\r\n\r\n\t\t// the html content of the final information\r\n\t\tvar l_strContent = '';\r\n\t\t// the modal dialog box\r\n\t\tvar $l_objModalBox = null;\r\n\t\t\r\n\t\t// try to get the picture information and add it bevore the actual HTML content\r\n\t\tl_strContent =  getSelectedPictureHtmlContent(i_objFIData) + '<div>'  + i_objFIData.content + '</div>'; \r\n\t\t\r\n\t\t// build the final information html content for the modal window \r\n\t\tl_strContent = getModalHtmlElementFinalInformation(\r\n\t\t\t\t\t\t    i_objFIData.content, \r\n\t\t\t\t\t\t\tgetSelectedPictureHtmlContent(i_objFIData),\r\n\t\t\t\t\t\t\ti_objFIData.height,\r\n\t\t\t\t\t\t\ti_objFIData.width);\r\n\t\t\r\n\t\t// create the dialog with the final information message\r\n\t\t$l_objModalBox = jQuery(l_strContent).modal({show: false});\r\n\t\t\r\n\t\t// if the dialog box is closed, then start the animation of the cards\r\n\t\t// to move them on the heap\r\n\t\t$l_objModalBox.on('hidden.bs.modal', function(){\r\n\t\t\t// if we are not in test mode\r\n\t\t\tif (!i_blnForTestMode){\r\n\t\t\t\t// do the after pair processing\r\n\t\t\t\tafterPairProcessing();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// finally show the modal window\r\n\t\t$l_objModalBox.modal('show');\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getSelectedPictureHtmlContent() {}\r\n\t\r\n\t/**\r\n\t * Returns the HTML content of the curently choosen pictures.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param\tobject\ti_objFIData\tObject with the data of the final information.\r\n\t * \t\t\t\t\tisActive: \ttrue if final information is activated\r\n\t * \t\t\t\t\tcontent:\tThe content of the final information\r\n\t * \t\t\t\t\twidth:\t\tThe width of the final information\r\n\t * \t\t\t\t\theight:\t\tThe height of the final information\r\n\t * \t\t\t\t\tpicwidth:\tThe width of the picture(s)\r\n\t * \t\t\t\t\tpicheight:\tThe height of the picture(s)\r\n\t * @return\tstring\tThe HTML content of the pictures.\r\n\t */\r\n\tfunction getSelectedPictureHtmlContent(i_objFIData){\r\n\t\t\r\n\t\t// the picture element\r\n\t\tvar $l_objPictureElement = null;\r\n\t\t// the returning HTML content\r\n\t\tvar l_strHtmlContent = '';\r\n\t\t// the area of the card\r\n\t\tvar l_strArea = '';\r\n\t\t\r\n\t\t// we are in text only mode\r\n\t\tif( m_intPairsType == GlPairs.C_INT_PAIRS_TYPE_TextOnly ){\r\n\t\t\t// there is no picture content\r\n\t\t\treturn l_strHtmlContent;\r\n\t\t}\r\n\t\t\r\n\t\t// for the first card it is always the upper area\r\n\t\tl_strArea = GlPairs.C_STR_AREA_UPPER;\r\n\r\n\t\t// try to get the first card \r\n\t\t$l_objPictureElement = jQuery(getIdFromExtId(m_objClickedCardParams.upperExtId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tl_strArea,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\r\n\r\n\t\t// if there is a picture found\r\n\t\tif($l_objPictureElement.length == 1 && $l_objPictureElement.prop(\"nodeName\") == \"IMG\"){\r\n\t\t\t// get the HTML content\r\n\t\t\tl_strHtmlContent = getPictureHtmlContent($l_objPictureElement, i_objFIData);\r\n\t\t}\r\n\t\t\r\n\t\t// if the pairs type is same picture\r\n\t\tif( m_intPairsType == GlPairs.C_INT_PAIRS_TYPE_SamePic ){\r\n\t\t\t// we need only one\r\n\t\t\treturn l_strHtmlContent;\r\n\t\t}\r\n\t\t\r\n\t\t// try to get the second card \r\n\t\t$l_objPictureElement = jQuery(getIdFromExtId(m_objClickedCardParams.lowerExtId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetCorrespondingArea(l_strArea),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\r\n\t\t\r\n\t\t// if there is a picture found\r\n\t\tif($l_objPictureElement.length == 1 && $l_objPictureElement.prop(\"nodeName\") == \"IMG\"){\r\n\t\t\t// get the HTML content\r\n\t\t\tl_strHtmlContent += getPictureHtmlContent($l_objPictureElement, i_objFIData);\r\n\t\t}\r\n\t\t\r\n\t\treturn l_strHtmlContent;\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getPictureHtmlContent() {}\r\n\t\r\n\t/**\r\n\t * Returns the HTML content of a given picture.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param\tobject\t$i_objPicture\tThe jQuery element of the picture.\r\n\t * @param\tobject\ti_objFIData\tObject with the data of the final information.\r\n\t * \t\t\t\t\tisActive: \ttrue if final information is activated\r\n\t * \t\t\t\t\tcontent:\tThe content of the final information\r\n\t * \t\t\t\t\twidth:\t\tThe width of the final information\r\n\t * \t\t\t\t\theight:\t\tThe height of the final information\r\n\t * \t\t\t\t\tpicwidth:\tThe width of the picture(s)\r\n\t * \t\t\t\t\tpicheight:\tThe height of the picture(s)\r\n\t * @return\tstring\tThe HTML content of the pictures.\r\n\t */\r\n\tfunction getPictureHtmlContent($i_objPicture, i_objFIData){\r\n\t\t// the new picture element\r\n\t\tvar $l_objPictureElementNew = null;\r\n\r\n\t\t// clone the picture \r\n\t\t$l_objPictureElementNew = $i_objPicture.clone();\r\n\t\t// and remove not necessary attributes\r\n\t\t$l_objPictureElementNew.css(\"border-width\", \"0px\");\r\n\t\t$l_objPictureElementNew.removeClass(\"glpairs_cls_card_border_right\");\r\n\t\t$l_objPictureElementNew.attr(\"id\", \"\");\r\n\t\t// set the padding value\r\n\t\t$l_objPictureElementNew.css(\"padding\", \"10px\");\r\n\t\t\r\n\t\t// if no width is given\r\n\t\tif (i_objFIData.picwidth === 0) {\r\n\t\t\t$l_objPictureElementNew.css(\"width\", \"\");\r\n\t\t} else {\r\n\t\t\t$l_objPictureElementNew.css(\"width\", i_objFIData.picwidth);\r\n\t\t}\r\n\t\t\r\n\t\t// if no heigth is given\r\n\t\tif (i_objFIData.picheight === 0) {\r\n\t\t\t$l_objPictureElementNew.css(\"height\", \"\");\r\n\t\t} else {\r\n\t\t\t$l_objPictureElementNew.css(\"height\", i_objFIData.picheight);\r\n\t\t}\r\n\t\t\r\n\t\t// return the HTML content\r\n\t\treturn $l_objPictureElementNew.prop(\"outerHTML\");\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_setChoosenIndicator() {}\r\n\t\r\n\t/**\r\n\t * Set indocator if the pair which is choosen is a correct or a wrong pair\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param\tstring\ti_strNewClass\tThe new class which should indicate this state\r\n\t */\r\n\tfunction setChoosenIndicator(i_strNewClass){\t\r\n\t\t\r\n\t\t// the current HTML element\r\n\t\tvar $l_currentElement = null;\r\n\t\t// the area of the current HTML element\r\n\t\tvar l_strCurrentArea = '';\r\n\t\t\r\n\t\t// for the first card it is always the upper area\r\n\t\tl_strCurrentArea = GlPairs.C_STR_AREA_UPPER;\r\n\t\t\r\n\t\t// get the first card\r\n\t\t$l_currentElement = jQuery(getIdFromExtId(m_objClickedCardParams.upperExtId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tl_strCurrentArea,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\r\n\r\n\t\t// change with an blinking border to the new class \r\n\t\tblinkBorder($l_currentElement, i_strNewClass);\t\r\n\t\t\r\n\t\t// get the second card\r\n\t\t$l_currentElement = jQuery(getIdFromExtId(m_objClickedCardParams.lowerExtId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t  getCorrespondingArea(l_strCurrentArea),\r\n\t\t\t\t\t\t\t\t\t\t\t\t  GlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\r\n\t\t\r\n\t\t// change with an blinking border to the new class\r\n\t\tblinkBorder($l_currentElement, i_strNewClass);\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getIdFromExtId() {}\r\n\t\r\n\t/**\r\n\t * Build the ID of e HTML element from the external Id.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param\tinteger\ti_intExtId\tthe external ID\r\n\t * @param\tstring\ti_strArea\tThe area. Upper or lower area is possible.\r\n\t * @param\tstring\ti_strSuffix\tThe suffix of the ID.\r\n\t * @return\tstring\t\t\t\tThe ID of the HTML element.\r\n\t */\r\n\tfunction getIdFromExtId(i_intExtId, i_strArea, i_strSuffix){\t\r\n\t\treturn '#' + m_strPairsId + '_' + i_intExtId + '_' +  i_strArea + '_' + i_strSuffix;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_blinkBorder() {}\r\n\t\r\n\t/**\r\n\t * Build the ID of e HTML element from the external Id.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param\t{object}\t$i_obj_card\t\t\tThe jQuery object of the card\r\n\t * @param\tstring\t\ti_strTargetClass\tThe target class after the border has blinked.\r\n\t */\r\n\tfunction blinkBorder($i_obj_card, i_strTargetClass){\r\n\t\t\r\n\t\t\r\n\t\t// if the counter is still not created\r\n\t\tif (typeof(blinkBorder.counter) == 'undefined'){\r\n\t\t\t// create it\r\n\t\t\tblinkBorder.counter = [];\r\n\t\t}\r\n\t\t\r\n\t\t// if the element in the counter array is not set\r\n\t\tif (typeof(blinkBorder.counter[$i_obj_card.attr('id')]) == 'undefined'){\r\n\t\t\tblinkBorder.counter[$i_obj_card.attr('id')] = 0;\r\n\t\t}\r\n\r\n\t\t// for the first time \r\n\t\tif(blinkBorder.counter[$i_obj_card.attr('id')] === 0){\r\n\t\t\tblinkBorder.counter[$i_obj_card.attr('id')]++;\r\n\t\t\t// we need to wait n miliseconds without changings\r\n\t\t\t// because we need to wait for the turn of the card\r\n\t\t\twindow.setTimeout(function(){blinkBorder($i_obj_card, i_strTargetClass);}, m_intTurnDuration);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// after the 4th blink \r\n\t\tif(blinkBorder.counter[$i_obj_card.attr('id')]++ == 4){\r\n\t\t\t// initialize all static variables\r\n\t\t\tblinkBorder.counter[$i_obj_card.attr('id')] = 0;\r\n\t\t\t// finish the incremental loop\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\t\r\n\t\t// toggle the target and the standard class\r\n\t\t$i_obj_card.toggleClass(GlPairs.C_STR_CARD_BORDER_CLASS_DEFAULT);\r\n\t\t$i_obj_card.toggleClass(i_strTargetClass);\r\n\t\t\r\n\t\t// after a timeout of 200 milliseconds toggle the classes again\r\n\t\twindow.setTimeout(function(){blinkBorder($i_obj_card, i_strTargetClass);}, 200);\t\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_setClickableOverlayDiv() {}\r\n\t\r\n\t/**\r\n\t * Set a div element over the whole game, for catching a click event.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param\tstring\t\ti_strEventHandler\tHandler method for the click event.\r\n\t */\r\n\tfunction setClickableOverlayDiv(i_strEventHandler){\r\n\t\t// the main div element\r\n\t\tvar $l_objMainDiv = null;\r\n\t\t// the overlay div\r\n\t\tvar $l_objOverlayDiv = null;\r\n\t\t// ID of the main div element\r\n\t\tvar l_strMainDivId = '';\r\n\t\t\r\n\t\t// create the ID of the main div element\r\n\t\tl_strMainDivId = getMainDivId();\r\n\t\t\r\n\t\t// get the main div element itself\r\n\t\t$l_objMainDiv = jQuery(l_strMainDivId);\r\n\t\t\r\n\t\t$l_objOverlayDiv = jQuery('<div/>', {\r\n\t\t\t\tid: m_strPairsId + '_' + 'overlay',\r\n\t\t\t\tstyle: \t\t'width: ' + $l_objMainDiv.width() + 'px;' +\r\n\t\t\t\t\t\t \t'height: ' + $l_objMainDiv.height() + 'px;' +\r\n\t\t\t\t\t\t\t'top: ' + $l_objMainDiv.position().top + 'px;' +\r\n\t\t\t\t\t\t\t'left: ' + $l_objMainDiv.position().left + 'px;' +\r\n\t\t\t\t\t\t\t'opacity: 1;' +\r\n\t\t\t\t\t\t    'position: absolute;'\r\n\t\t\t});\r\n\t\t\r\n\t\t// append the overlay\r\n\t\t$l_objMainDiv.append($l_objOverlayDiv);\r\n\t\t\r\n\t\t// register the mouse click event\r\n\t\t$l_objOverlayDiv.click(\r\n\t\t\tfunction(i_objEvent){\r\n\t\t\t\t// call the event handler which delegates the request to the actual handler\r\n\t\t\t\tGlPairs.glpairsEventHandler(m_strPairsId, i_objEvent, i_strEventHandler, $l_objOverlayDiv);\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// if the automatic click is not deactivated\r\n\t\tif (m_intTurnbackDelay !== 0){\r\n\t\t\t// click on the everlay after n seconds automatically\r\n\t\t\tm_TimeoutOverlayClick = window.setTimeout(function(){$l_objOverlayDiv.trigger('click');}, m_intTurnbackDelay);\r\n\t\t}\r\n\t\t\r\n\t\t// if the click hint is not deactivated\r\n\t\tif (m_intClickHintDelay !== 0){\r\n\t\t\tm_TimeoutClickHint = window.setTimeout(function(){showAnimatedClickHint();},m_intClickHintDelay);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_turnBackCards() {}\r\n\t\r\n\t/**\r\n\t * Turns the both choosen cards back again.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction turnBackCards(){\r\n\t\t// element with the border of the card\r\n\t\tvar $l_objBorderElement = null;\r\n\t\t// the area of the card\r\n\t\tvar l_strArea = '';\r\n\t\t// the class of the current border of the choosen cards\r\n\t\tvar l_strCurrentBorderClass = '';\r\n\t\t\r\n\t\t// if the correct pair was choosen\r\n\t\tif(m_arrExtIdMapping[m_objClickedCardParams.upperExtId] ==\r\n\t\t\t\t\t\t\t\t\t\t m_arrExtIdMapping[m_objClickedCardParams.lowerExtId]){\r\n\t\t\t// the current border class is right\r\n\t\t\tl_strCurrentBorderClass = GlPairs.C_STR_CARD_BORDER_CLASS_RIGHT;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// the current border class is wrong\r\n\t\t\tl_strCurrentBorderClass = GlPairs.C_STR_CARD_BORDER_CLASS_WRONG;\r\n\t\t}\r\n\r\n\t\t// for the first card it is always the upper area\r\n\t\tl_strArea = GlPairs.C_STR_AREA_UPPER;\r\n\t\t\r\n\t\t// flip over the first card\r\n\t\tflipOverCard(m_objClickedCardParams.upperExtId, l_strArea ); \r\n\r\n\t\t// get the border element of the first card \r\n\t\t$l_objBorderElement = jQuery(getIdFromExtId(m_objClickedCardParams.upperExtId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tl_strArea,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\r\n\t\t// and toggle the card back to the default border class\r\n\t\t$l_objBorderElement.toggleClass(GlPairs.C_STR_CARD_BORDER_CLASS_DEFAULT);\r\n\t\t$l_objBorderElement.toggleClass(l_strCurrentBorderClass);\r\n\t\t\r\n\t\t// flip over the second card\r\n\t\tflipOverCard(m_objClickedCardParams.lowerExtId, getCorrespondingArea(l_strArea)); \r\n\r\n\t\t// get the border element of the second card \r\n\t\t$l_objBorderElement = jQuery(getIdFromExtId(m_objClickedCardParams.lowerExtId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetCorrespondingArea(l_strArea),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_FRONT_CARD));\r\n\t\t// and toggle the card back to the default border class\r\n\t\t$l_objBorderElement.toggleClass(GlPairs.C_STR_CARD_BORDER_CLASS_DEFAULT);\r\n\t\t$l_objBorderElement.toggleClass(l_strCurrentBorderClass);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_setResultOfGame() {}\r\n\t\r\n\t/**\r\n\t * Adds the givven value to the result of the pairs game\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param\tinteger\ti_intValue\tThe value which should be added to the result.\r\n\t */\r\n\tfunction setResultOfGame(i_intValue){\r\n\t\t\r\n\t\t// the jQuery object with the result div element\r\n\t\tvar $l_objResult = null;\r\n\t\t// the ID of the result div element\r\n\t\tvar l_strResultID = '';\r\n\t\t// the current value of the result\r\n\t\tvar l_intCurrentValue = 0;\r\n\t\t\r\n\t\t// create the ID of the result div element\r\n\t\tl_strResultID = '#' + m_strPairsId + '_' + GlPairs.C_STR_ID_SUFFIX_RESULT;\r\n\t\t\r\n\t\t// get the element\r\n\t\t$l_objResult = jQuery(l_strResultID);\r\n\t\t\r\n\t\t// get the current value\r\n\t\tl_intCurrentValue = parseInt($l_objResult.text());\r\n\t\t\r\n\t\t// add the new value to the current value\r\n\t\tl_intCurrentValue += i_intValue;\r\n\t\t\r\n\t\t// write it back into the DOM\r\n\t\t$l_objResult.text(l_intCurrentValue);\r\n\t\t\r\n\t\tif(i_intValue < 0){\r\n\t\t\t// toggle a red background for 1 second\r\n\t\t\t$l_objResult.toggleClass('glpairs_cls_result_negative');\r\n\t\t\twindow.setTimeout(function(){$l_objResult.toggleClass('glpairs_cls_result_negative');}, 1000);\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// toggle a green background for 1 second\r\n\t\t\t$l_objResult.toggleClass('glpairs_cls_result_positive');\r\n\t\t\twindow.setTimeout(function(){$l_objResult.toggleClass('glpairs_cls_result_positive');}, 1000);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getResultOfGame() {}\r\n\t\r\n\t/**\r\n\t * Get the result of the game.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction getResultOfGame(){\r\n\t\t\r\n\t\t// the jQuery object with the result div element\r\n\t\tvar $l_objResult = null;\r\n\t\t// the ID of the result div element\r\n\t\tvar l_strResultID = '';\r\n\t\t// the current value of the result\r\n\t\tvar l_intCurrentValue = 0;\r\n\t\t\r\n\t\t// create the ID of the result div element\r\n\t\tl_strResultID = '#' + m_strPairsId + '_' + GlPairs.C_STR_ID_SUFFIX_RESULT;\r\n\t\t\r\n\t\t// get the element\r\n\t\t$l_objResult = jQuery(l_strResultID);\r\n\t\t\r\n\t\t// get the current value\r\n\t\tl_intCurrentValue = parseInt($l_objResult.text());\r\n\t\t\r\n\t\t// return the value\r\n\t\treturn l_intCurrentValue;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_initializeClickedCardParams() {}\r\n\t\r\n\t/**\r\n\t * Initialize the global attribute m_objClickedCardParams with the currently choosed cards\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction initializeClickedCardParams(){\r\n\t\tm_objClickedCardParams.upperCardChoosed = false;\r\n\t\tm_objClickedCardParams.lowerCardChoosed = false;\r\n\t\tm_objClickedCardParams.upperExtId = 0;\r\n\t\tm_objClickedCardParams.lowerExtId = 0;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_animateCard2Stack() {}\r\n\t\r\n\t/**\r\n\t * Move one cards to the stack, so that the could not choosed again.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param {object}\t$i_objCard\tjQuery object with the card element, which should be animated.\r\n\t * @param integer\ti_intExtId\tThe external ID of the card.\r\n\t * @param string\ti_strArea\tThe area of the card\r\n\t */\r\n\tfunction animateCard2Stack($i_objCard){\r\n\t\t// the place with the card stack\r\n\t\tvar $l_objCardStack = null;\r\n\t\t// the offset from the top\r\n\t\tvar l_intOffsetTop = 0;\r\n\t\t// the offset from the left\r\n\t\tvar l_intOffsetLeft = 0;\r\n\t\t// random offset for the animation\r\n\t\tvar l_fltRandomOffsetTop = 0;\r\n\t\tvar l_fltRandomOffsetLeft = 0;\r\n\t\t\r\n\t\tvar l_intCardstackOffset = 0;\r\n\t\tvar l_intCardOffset = 0;\r\n\r\n\t\t\r\n\t\t// get the card stack\r\n\t\t$l_objCardStack = jQuery('#' + m_strPairsId + '_' + GlPairs.C_STR_ID_SUFFIX_CARD_STACK);\r\n\t\t\r\n\t\t// get random values for the offset\r\n\t\tl_fltRandomOffsetTop = getRandomNumber4Animation();\r\n\t\tl_fltRandomOffsetLeft = getRandomNumber4Animation();\r\n\t\t\r\n\t\t// compute top offset\r\n\t\tl_intCardstackOffset = $l_objCardStack.offset().top;\r\n\t\tl_intCardOffset = $i_objCard.offset().top;\r\n\t\tl_intOffsetTop = l_intCardstackOffset - l_intCardOffset + l_fltRandomOffsetTop;\r\n\t\t\r\n\t\t// compute left offset\r\n\t\tl_intCardstackOffset = $l_objCardStack.offset().left;\r\n\t\tl_intCardOffset = $i_objCard.offset().left;\r\n\t\tl_intOffsetLeft = l_intCardstackOffset - l_intCardOffset + l_fltRandomOffsetLeft;\r\n\t\t\r\n\t\t// change position to relative, otherwise the animation has no effect\r\n\t\t$i_objCard.css('position', 'relative');\r\n\t\t// remove the classes with the HTML5 parameters\r\n\t\t// this is disturbing the animation\r\n\t\t$i_objCard.removeClass('glpairs_cls_card_visible');\r\n\t\t$i_objCard.removeClass('glpairs_cls_card_common');\r\n\t\t$i_objCard.css('transition', '');\r\n\r\n\r\n\t\t// move the card to the stack\r\n\t\t$i_objCard.animate({ top: '+=' + l_intOffsetTop ,\r\n\t\t\t \t\t\t\t left: '+=' + l_intOffsetLeft \r\n\t\t   \t\t\t\t\t}, \r\n\t\t   \t\t\t\t\t{ duration: m_intMoveStackDuration,\r\n\t\t   \t\t\t\t\t  easing: 'linear'\r\n\t\t   \t\t\t\t\t});\r\n\t\t   \t\t\t\t\t\r\n\t\t\r\n\t\t// turn the card a little bit after the animation\r\n\t\twindow.setTimeout(function(){turnCard($i_objCard);}, m_intMoveStackDuration / 2);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_turnCard() {}\r\n\t\r\n\t/**\r\n\t * Turn the card randomly a little bit\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param {object}\t$i_objCard\tjQuery object with the card element, which should be turned.\r\n\t */\r\n\tfunction turnCard($i_objCard){\t\r\n\t\t\r\n\t\t// the random degrees of the the turn\r\n\t\tvar l_fltDegrees = 0;\r\n\t\t\r\n\t\t// first get a random number between 0 and 1\r\n\t\tl_fltDegrees = Math.random();\r\n\t\t// transform it to a number between -1000 and 1000\r\n\t\tl_fltDegrees = Math.round(l_fltDegrees * 2000 - 1000);\r\n\t\t// and now transform it to a number between -10 and 10 with two digits after the point\r\n\t\tl_fltDegrees = l_fltDegrees / 100;\r\n\t\t\r\n\t\t$i_objCard.css('transform', 'rotateZ( ' + l_fltDegrees + 'deg )');\r\n\t\t$i_objCard.css('-ms-transform', 'rotateZ( ' + l_fltDegrees + 'deg )');\r\n\t\t$i_objCard.css('-moz-transform', 'rotateZ( ' + l_fltDegrees + 'deg )');\r\n\t\t$i_objCard.css('-webkit-transform', 'rotateZ( ' + l_fltDegrees + 'deg )');\r\n\t\t$i_objCard.css('-o-transform', 'rotateZ( ' + l_fltDegrees + 'deg )');\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_gameFinishedDialog() {}\r\n\t\r\n\t/**\r\n\t * Turn the card randomly a little bit\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction gameFinishedDialog(){\r\n\t\t// the dialof string formated\r\n\t\tvar l_strDialog = '';\r\n\t\t\r\n\t\tl_strDialog = m_objI18n.gameFinished;\r\n\t\t\r\n\t\tl_strDialog = l_strDialog.replace('&1', getResultOfGame()); \r\n\t\t\r\n\t\t// start a dialog with the finished message\r\n\t\tjQuery(getModalHtmlElement(l_strDialog)).modal();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getRandomNumber4Animation() {}\r\n\t\r\n\t/**\r\n\t * Returns a Random Offset for the animation\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @return number\r\n\t */\r\n\tfunction getRandomNumber4Animation(){\r\n\t\t// the random number\r\n\t\tvar l_fltRandom = 0;\r\n\t\t\r\n\t\t// comute a random offset between 10 and 20\r\n\t\tl_fltRandom = Math.random();\r\n\t\tl_fltRandom = Math.round(l_fltRandom * 10 + 10);\r\n\t\treturn l_fltRandom;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_showAnimatedClickHint() {}\r\n\t\r\n\t/**\r\n\t * Show an animated hint for doing a click an the pairs game. After the user\r\n\t * has choosed two cards he need to click on the game for going on.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction showAnimatedClickHint(){\r\n\t\t// the main div element\r\n\t\tvar $l_objMainDiv = null;\r\n\t\t// the dialog itself\r\n\t\tvar $l_objDialog = null;\r\n\t\t// the left property of the div element\r\n\t\tvar l_intLeft = 0;\r\n\t\t// the duration of the animation in milliseconds\r\n\t\tvar l_intDuration = 0;\r\n\r\n\t\t// get the main div element itself\r\n\t\t$l_objMainDiv = jQuery(getMainDivId());\r\n\t\t\r\n\t\t// create the dialog with the click hint\r\n\t\t$l_objDialog = jQuery(\"<div />\",{\r\n\t\t\t\tid:\t\tm_strPairsId + '_' + GlPairs.C_STR_ID_SUFFIX_CLICK_HINT,\r\n\t\t\t\t'class':\t'glpairs_cls_click_hint',\r\n\t\t\t\tstyle:\t'top: ' + ($l_objMainDiv.height() + $l_objMainDiv.position().top) + 'px; '\r\n\t\t\t});\r\n\t\t$l_objDialog.html(m_objI18n.clickHint);\r\n\t\t\r\n\t\t// append the new element\r\n\t\t$l_objMainDiv.append($l_objDialog);\r\n\t\t\r\n\t\t// now with the content we know the width of the div element\r\n\t\t// and we can caculate the left property\r\n\t\tl_intLeft = $l_objMainDiv.width() - $l_objDialog.width();\r\n\t\tif (l_intLeft < 0) {\r\n\t\t\tl_intLeft = 0;\r\n\t\t}\r\n\t\tl_intLeft = Math.round(l_intLeft / 2);\r\n\t\t\r\n\t\t// set the left property\r\n\t\t$l_objDialog.css('left', l_intLeft);\r\n\t\t\r\n\t\t// caculate the duration\r\n\t\tl_intDuration = $l_objMainDiv.height() * 10;\r\n\t\t\r\n\t\t$l_objDialog.animate(\r\n\t\t\t\t{ top: '-=' + $l_objMainDiv.height() },\r\n\t\t\t\tl_intDuration,\r\n\t\t\t\t'linear'\r\n\t\t\t).animate(\r\n\t\t\t\t{ opacity: 0 },\r\n\t\t\t\t500,\r\n\t\t\t\tfunction(){\r\n\t\t\t\t\t// after the animation is finished\r\n\t\t\t\t\t// we need to remove the div element again\r\n\t\t\t\t\t$l_objDialog.remove(); }\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_unregisterEventsConditional() {}\r\n\t\r\n\t/**\r\n\t * unregister the click event if two correct cards are choosed\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction unregisterEventsConditional(){\r\n\t\t\r\n\t\t// a card element\r\n\t\tvar $l_objCardElement = null;\r\n\t\t// id of the div element of a card\r\n\t\tvar l_strCardDivId = '';\r\n\t\t// the area of the card\r\n\t\tvar l_strArea = '';\r\n\t\t\r\n\t\t// if both cards are choosen\r\n\t\t// and it is from the same pair\r\n\t\tif (m_objClickedCardParams.upperCardChoosed\t&& m_objClickedCardParams.lowerCardChoosed &&\r\n\t\t\tm_arrExtIdMapping[m_objClickedCardParams.upperExtId] ==\r\n\t\t\t\t\t\t\t\t\t\t\t m_arrExtIdMapping[m_objClickedCardParams.lowerExtId]){\r\n\r\n\t\t\t// for the first card it is always the upper area\r\n\t\t\tl_strArea = GlPairs.C_STR_AREA_UPPER;\r\n\t\t\t\r\n\t\t\t// build the ID of the cardelement\r\n\t\t\tl_strCardDivId = getIdFromExtId(m_objClickedCardParams.upperExtId, \r\n\t\t\t\t\t\t\t\t\t\t\tl_strArea, \r\n\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_CARD_OVERALL);\r\n\t\t\t\r\n\t\t\t// get the div element with the ID\r\n\t\t\t$l_objCardElement = jQuery(l_strCardDivId);\r\n\t\t\t\r\n\t\t\t// unregister the click event\r\n\t\t\t$l_objCardElement.unbind('click');\r\n\t\t\t// set the cursor back to the default value\r\n\t\t\t$l_objCardElement.css('cursor', 'auto');\r\n\r\n\t\t\t// build the ID of the second card\r\n\t\t\tl_strCardDivId = getIdFromExtId(m_objClickedCardParams.lowerExtId, \r\n\t\t\t\t\t\t\t\t\t\t\tgetCorrespondingArea(l_strArea), \r\n\t\t\t\t\t\t\t\t\t\t\tGlPairs.C_STR_ID_SUFFIX_CARD_OVERALL);\r\n\t\t\t\r\n\t\t\t// get the div element with the ID\r\n\t\t\t$l_objCardElement = jQuery(l_strCardDivId);\r\n\t\t\t\r\n\t\t\t// unregister the click event\r\n\t\t\t$l_objCardElement.unbind('click');\r\n\t\t\t// set the cursor back to the default value\r\n\t\t\t$l_objCardElement.css('cursor', 'auto');\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_setTurnBackEvents() {}\r\n\r\n\t/**\r\n\t * Register the events for the end of the turn back transition.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction setTurnBackEvents() {\r\n\t\t\r\n\t\t// the jQuery object with the first back of the card\r\n\t\tvar $l_objCardBackFirst = null;\r\n\t\t// the jQuery object with the second back of the card\r\n\t\tvar $l_objCardBackSecond = null;\r\n\t\t// the area of the card\r\n\t\tvar l_strArea = '';\r\n\r\n\t\t// for the first card it is always the upper area\r\n\t\tl_strArea = GlPairs.C_STR_AREA_UPPER;\r\n\r\n\t\t// get the back of the first card\r\n\t\t$l_objCardBackFirst = jQuery(getIdFromExtId(m_objClickedCardParams.upperExtId,\r\n\t\t\t\t\t\t\t\t\t\t\t   l_strArea,\r\n\t\t\t\t\t\t\t\t\t\t\t   GlPairs.C_STR_ID_SUFFIX_BACK));\r\n\t\t\r\n\t\t// register the end event of the turn transition of the back card\r\n\t\t$l_objCardBackFirst.on(\r\n\t\t\t'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd',\r\n\t\t\t function(i_objEvent){\r\n\t\t\t\t// call the event handler which delegates the request to the actual handler\r\n\t\t\t\tGlPairs.glpairsEventHandler(m_strPairsId, i_objEvent, 'onTurnBackCardEnd', $l_objCardBackFirst);\r\n\t\t\t });\r\n\t\t\r\n\t\t// get the back of the second card\r\n\t\t$l_objCardBackSecond = jQuery(getIdFromExtId(m_objClickedCardParams.lowerExtId,\r\n\t\t\t\t\t\t\t\t\t\t\t   \t\t getCorrespondingArea(l_strArea),\r\n\t\t\t\t\t\t\t\t\t\t\t   \t\t GlPairs.C_STR_ID_SUFFIX_BACK));\r\n\t\t\r\n\t\t// register the end event of the turn transition of the back card\r\n\t\t$l_objCardBackSecond.on(\r\n\t\t\t'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd',\r\n\t\t\t function(i_objEvent){\r\n\t\t\t\t// call the event handler which delegates the request to the actual handler\r\n\t\t\t\tGlPairs.glpairsEventHandler(m_strPairsId, i_objEvent, 'onTurnBackCardEnd', $l_objCardBackSecond);\r\n\t\t\t });\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_performTestMode() {}\r\n\r\n\t/**\r\n\t * Turn all cards for the test mode\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction performTestMode() {\r\n\t\t// the ID of the main div element container for this pairs game\r\n\t\tvar l_strMainDivId = '';\r\n\t\t// array with all element IDs for the cards\r\n\t\tvar l_arrCardIds = [];\r\n\t\t\r\n\t\tl_strMainDivId = getMainDivId();\r\n\t\t\r\n\t\t// select all elements of this pairs container and filter\r\n\t\t// for all overall container elements of the cards\r\n\t\tjQuery(l_strMainDivId).find(\".glpairs_cls_click_content\").each(\r\n\t\t\tfunction(i_intIndex){\r\n\t\t\t\t// array with the content element uID and the internal ID\r\n\t\t\t\tvar l_objElementId = {};\r\n\t\t\t\t// the current anchor element\r\n\t\t\t\tvar $l_objCurrentCardContainer = jQuery(this);\r\n\r\n\t\t\t\t// get the elements of the ID of this card\r\n\t\t\t\tl_objElementId = getIdArrayFromId($l_objCurrentCardContainer.attr('id'));\r\n\t\t\t\t\r\n\t\t\t\t// push this element to the array\r\n\t\t\t\tl_arrCardIds.push(l_objElementId);\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t\t// turn all cards from the array\r\n\t\tturnAllCards(l_arrCardIds);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_turnAllCards() {}\r\n\r\n\t/**\r\n\t * Turn all cards from the given card id array with a certain delay between every card\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t *\r\n\t * @param array\ti_arrCardIds\tArray with all IDs of the cards\t\r\n\t */\r\n\tfunction turnAllCards(i_arrCardIds) {\r\n\r\n\t\t// array with the content element uID and the internal ID\r\n\t\t// pairsId:\tID for the content element of the whole pairs game\r\n\t\t// extId:\t\tinternal Id of the card\r\n\t\t// area:\t\tweather we are in the lower or upper area\r\n\t\t// suffix:\t\tthe suffix of the ID\r\n\t\tvar l_objElementId = {};\r\n\t\t\r\n\t\t// exit condition, if the lenght of the array is 0\r\n\t\tif (i_arrCardIds.length === 0) {\r\n\t\t\t\r\n\t\t\t// show the test mode hint\r\n\t\t\tjQuery(getModalHtmlElement(m_objI18n.testmode)).modal();\r\n\t\t\t\r\n\t\t\t// exit the function\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// get the first element and cut it from the array\r\n\t\tl_objElementId = i_arrCardIds.shift();\r\n\t\t\r\n\t\t// flip over the card\r\n\t\tflipOverCard(l_objElementId.extId, l_objElementId.area ); \r\n\r\n\t\t// after a timeout turn the next card\r\n\t\twindow.setTimeout( function(){turnAllCards(i_arrCardIds);}, \r\n\t\t\t\tm_intTestModeTurnDelay );\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_initializeGlobals() {}\r\n\r\n\t/**\r\n\t * Initialize some global properties of the pairs game\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t *\r\n\t */\r\n\tfunction initializeGlobals() {\r\n\t\t// build the global status object for all cards in the game\r\n\t\t// initialy thy all in the state backside\r\n\t\tfor (var l_intExtId in m_arrExtIdMapping) {\r\n\t\t\tif(m_arrExtIdMapping.hasOwnProperty(l_intExtId)){\r\n\t\t\t\tm_objCardTurnState[l_intExtId] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_flipOverCard() {}\r\n\r\n\t/**\r\n\t * Turn a card to the frontside or vice versa\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t *\r\n\t * @param integer\ti_intExtId\tExternal ID of the card\r\n\t * @param string\ti_strArea\tArea of the card (upper or lower)\t\r\n\t */\r\n\tfunction flipOverCard(i_intExtId, i_strArea ) {\r\n\t\t\r\n\t\t// the jQuery object of the frontside\r\n\t\tvar $l_objFrontside = null;\r\n\t\t// the ID of the frontside card\r\n\t\tvar l_strCardDivId = ''; \r\n\t\t\r\n\t\t// build the ID of the cardelement\r\n\t\tl_strCardDivId = getIdFromExtId(i_intExtId, i_strArea, GlPairs.C_STR_ID_SUFFIX_FRONT);\r\n\t\t// get the div element with the ID\r\n\t\t$l_objFrontside = jQuery(l_strCardDivId);\r\n\t\t\r\n\t\t\r\n\t\t// if the frontside is currently shown\r\n\t\tif (m_objCardTurnState[i_intExtId]){\r\n\r\n\t\t\t// toggle the class from invisible to visible for the backside\r\n\t\t\ttoggleClassOfCardElement(i_intExtId, i_strArea, GlPairs.C_STR_ID_SUFFIX_BACK, true);\r\n\t\t\t// toggle the class from visible to invisible for the frontside\r\n\t\t\ttoggleClassOfCardElement(i_intExtId, i_strArea, GlPairs.C_STR_ID_SUFFIX_FRONT, false);\r\n\r\n\t\t\t// make the frontside invisible\r\n\t\t\t$l_objFrontside.css('opacity', '0.0');\r\n\t\t\t$l_objFrontside.css('visibility', 'hidden');\r\n\r\n\t\t\t// set the flag for this card to backside is visible\r\n\t\t\tm_objCardTurnState[i_intExtId] = false;\r\n\t\t\r\n\t\t// if the backside is currently shown\r\n\t\t} else {\r\n\r\n\t\t\t// make the frontside visible\r\n\t\t\t$l_objFrontside.css('opacity', '1.0');\r\n\t\t\t$l_objFrontside.css('visibility', 'visible');\r\n\r\n\t\t\t// toggle the class from visible to invisible for the backside\r\n\t\t\ttoggleClassOfCardElement(i_intExtId, i_strArea, GlPairs.C_STR_ID_SUFFIX_BACK, false);\r\n\t\t\t// toggle the class from invisible to visible for the frontside\r\n\t\t\ttoggleClassOfCardElement(i_intExtId, i_strArea, GlPairs.C_STR_ID_SUFFIX_FRONT, true);\r\n\t\t\t\r\n\t\t\t// set the flag for this card to frontside is visible\r\n\t\t\tm_objCardTurnState[i_intExtId] = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_afterPairProcessing() {}\r\n\r\n\t/**\r\n\t * Process all necessary things after the second pair is choosed.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t */\r\n\tfunction afterPairProcessing() {\r\n\r\n\t\t// if the correct pair was choosed\r\n\t\tif(m_arrExtIdMapping[m_objClickedCardParams.upperExtId] == \r\n\t\t\t\t\t\t\t\t\t\t\tm_arrExtIdMapping[m_objClickedCardParams.lowerExtId]){\r\n\t\t\t// add n plus points\r\n\t\t\tsetResultOfGame(m_intPointsPlus);\r\n\t\t\t\r\n\t\t\t// register the events for the end of the turn back transition \r\n\t\t\t// if this event is triggered the card getting moved to the card stack\r\n\t\t\tsetTurnBackEvents();\r\n\t\t\t\r\n\t\t\t// decrease the pairs count\r\n\t\t\tm_intPairsCount -= 1;\r\n\t\t}\r\n\t\t\r\n\t\t// if the wrong pair is choosen\r\n\t\telse{\r\n\t\t\t// set n negative point\r\n\t\t\tsetResultOfGame(-1 * m_intPointsMinus);\r\n\t\t}\r\n\t\t\t\t\r\n\t\t// turn the both choosen cards back again\r\n\t\tturnBackCards();\r\n\t\t\r\n\t\t// initialize the global atttribute with the currently chosed cards\r\n\t\tinitializeClickedCardParams();\r\n\t\t\r\n\t\t// if the last pair was found\r\n\t\tif (m_intPairsCount === 0) {\r\n\t\t\t// show the finish dialog after a little delay\r\n\t\t\twindow.setTimeout( function(){gameFinishedDialog();}, \r\n\t\t\t\t\t    m_intTurnDuration + m_intMoveStackDuration + 200 );\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getCorrespondingExtId() {}\r\n\r\n\t/**\r\n\t * Process all necessary things after the second pair is choosed.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param \tstring i_strExtId\tThe first extID\r\n\t * @returns\tstring\t\t\t\tThe second extID\r\n\t */\r\n\tfunction getCorrespondingExtId(i_strExtId) {\r\n\t\tvar l_intUId = 0;\r\n\t\t\r\n\t\t// get the UID of this pair\r\n\t\tl_intUId = m_arrExtIdMapping[i_strExtId];\r\n\t\t\r\n\t\t// if the first extID is not even the current ext ID\r\n\t\tif (i_strExtId != m_arrUidMapping[l_intUId][GlPairs.C_STR_ARR_ID_EXT_ID1])\r\n\t\t{ \r\n\t\t\t// the give this extID back\r\n\t\t\treturn m_arrUidMapping[l_intUId][GlPairs.C_STR_ARR_ID_EXT_ID1];\r\n\t\t\t\r\n\t\t// if it is the other extID\r\n\t\t} else {\r\n\t\t\t// give this back\r\n\t\t\treturn m_arrUidMapping[l_intUId][GlPairs.C_STR_ARR_ID_EXT_ID2];\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getCorrespondingArea() {}\r\n\r\n\t/**\r\n\t * Process all necessary things after the second pair is choosed.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param \tstring i_strArea\tThe first area\r\n\t * @returns\tstring\t\t\t\tThe other area\r\n\t */\r\n\tfunction getCorrespondingArea(i_strArea) {\r\n\t\t\r\n\t\t// if we are in split mode\r\n\t\tif (m_blnSplitmode){\r\n\t\t\t\r\n\t\t\t// if this is the upper area\r\n\t\t\tif(i_strArea == GlPairs.C_STR_AREA_UPPER){\r\n\t\t\t\t// return the other\r\n\t\t\t\treturn GlPairs.C_STR_AREA_LOWER;\r\n\t\t\t} else {\r\n\t\t\t\treturn GlPairs.C_STR_AREA_UPPER;\r\n\t\t\t}\r\n\t\t\r\n\t\t// if we are not in split mode\r\n\t\t} else {\r\n\t\t\t// we have always upper area\r\n\t\t\treturn GlPairs.C_STR_AREA_UPPER;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_setCorrespondingChoosedCards() {}\r\n\r\n\t/**\r\n\t * Process all necessary things after the second pair is choosed.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param \t{object}\ti_objElementId \tObject with four elements\r\n\t * \t\t\t\t\t\t\t\t\t\tpairsId:\tID for the content element of the whole pairs game\r\n\t * \t\t\t\t\t\t\t\t\t\textId:\t\tinternal Id of the card\r\n\t * \t\t\t\t\t\t\t\t\t\tarea:\t\tweather we are in the lower or upper area\r\n\t * \t\t\t\t\t\t\t\t\t\tsuffix:\t\tthe suffix of the ID\r\n\t * \r\n\t */\r\n\tfunction setCorrespondingChoosedCards(i_objElementId) {\r\n\t\t\r\n\t\t// if this is from the upper area \r\n\t\tif (i_objElementId.area == GlPairs.C_STR_AREA_UPPER){\r\n\t\t\t// set the choosed cards there\r\n\t\t\tm_objClickedCardParams.upperCardChoosed = true;\r\n\t\t\tm_objClickedCardParams.upperExtId = i_objElementId.extId;\r\n\t\t\t// and the corresponding cards to the other \r\n\t\t\tm_objClickedCardParams.lowerCardChoosed = true;\r\n\t\t\tm_objClickedCardParams.lowerExtId = getCorrespondingExtId(i_objElementId.extId);\r\n\t\t\r\n\t\t// if this is from the lower area\r\n\t\t} else {\r\n\t\t\t// set the choosed cards there\r\n\t\t\tm_objClickedCardParams.lowerCardChoosed = true;\r\n\t\t\tm_objClickedCardParams.lowerExtId = i_objElementId.extId;\r\n\t\t\t// and the corresponding cards to the other \r\n\t\t\tm_objClickedCardParams.upperCardChoosed = true;\r\n\t\t\tm_objClickedCardParams.upperExtId = getCorrespondingExtId(i_objElementId.extId);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getModalHtmlElement() {}\r\n\r\n\t/**\r\n\t * Process all necessary things after the second pair is choosed.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param \t{string}\ti_strContent \tContent of the modal dialog window\r\n\t */\r\n\tfunction getModalHtmlElement(i_strContent) {\r\n\t\t// build modal window with text\r\n\t\treturn [\r\n\t    '<div class=\"modal fade bs-example-modal-sm\" role=\"dialog\">',\r\n\t      '<div class=\"modal-dialog modal-sm\" role=\"document\">',\r\n\t        '<div class=\"modal-content\">',\r\n\t        \t'<div class=\"modal-body\">',\r\n\t        \t\ti_strContent,\r\n\t        \t'</div>',\r\n\t\t\t\t'<div class=\"modal-footer\">',\r\n\t        \t\t'<button type=\"button\" class=\"btn btn-default\"', \r\n\t          \t\t\t\t'data-dismiss=\"modal\">OK</button>',\r\n\t      \t\t'</div>',          \r\n\t        '</div>',\r\n\t      '</div>',\r\n\t    '</div>'  \r\n\t\t].join('\\n');\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * @ignore\r\n\t * workaround without this dummy the next function disapears in the outline view. */\r\n\tfunction dummy_getModalHtmlElementFinalInformation() {}\r\n\r\n\t/**\r\n\t * Process all necessary things after the second pair is choosed.\r\n\t * \r\n\t * @function\r\n\t * @inner\r\n\t * @memberOf GLPairs\r\n\t * \r\n\t * @param \t{string}\ti_strContent \tContent of the modal dialog window\r\n\t * @param \t{string}\ti_strImages \tImage data of the modal dialog window\r\n\t * @param\t{integer}\ti_intHeight\t\tHeight of the modal window\r\n\t * @param\t{integer}\ti_intWidth\t\tWidth of the modal window\r\n\t */\r\n\tfunction getModalHtmlElementFinalInformation(i_strContent, i_strImages,\r\n\t\t\t\t\t\t\t\t\t\t\t\t i_intHeight, i_intWidth) {\r\n\t\t// size of the window\r\n\t\tvar l_strSize = \"\";\r\n\t\t// height of the window\r\n\t\tvar l_strHeight = \"\";\r\n\t\t// width of the window\r\n\t\tvar l_strWidth = \"\";\r\n\r\n\t\t// if a height is given\r\n\t\tif(i_intHeight !== 0){\r\n\t\t\tl_strHeight = \"height: \" + i_intHeight + \"px;\";\r\n\t\t}\r\n\t\t\r\n\t\t// if a width is given\r\n\t\tif(i_intWidth !== 0){\r\n\t\t\tl_strWidth = \"width: \" + i_intWidth + \"px;\";\r\n\t\t}\r\n\t\t\r\n\t\t// if there is a size given at all\r\n\t\tif(i_intHeight !== 0 || i_intWidth !== 0){\r\n\t\t\t// build the style tag\r\n\t\t\tl_strSize = 'style=\"' + l_strHeight + ' ' + l_strWidth + '\"';\r\n\t\t}\r\n\t\t\r\n\t\treturn [\r\n\t\t\t'<div id=\"modalwindow\" class=\"modal fade\" role=\"dialog\"',\r\n\t\t\t  l_strSize,\r\n\t\t\t  '>',\r\n\t\t\t  '<div class=\"modal-dialog\" role=\"document\">',\r\n\t\t\t    '<div class=\"modal-content\"',\r\n\t\t\t    l_strSize,\r\n\t\t\t    '>',\r\n\t\t\t      '<div class=\"modal-body\">',\r\n\t\t\t        '<div>',\r\n\t\t\t          i_strImages,\r\n\t\t\t        '</div>',\r\n\t\t\t        '<div>',\r\n\t\t\t          i_strContent,\r\n\t\t\t        '</div>',\r\n\t\t\t      '</div>',\r\n\t\t\t      '<div class=\"modal-footer\">',\r\n\t\t\t        '<button type=\"button\" class=\"btn btn-default\"',\r\n\t\t\t          'data-dismiss=\"modal\">OK</button>',\r\n\t\t\t      '</div>',\r\n\t\t\t    '</div>',\r\n\t\t\t  '</div>',\r\n\t\t\t'</div>',\r\n\t\t   ].join('\\n');\r\n\t}\r\n}\r\n\r\n// ***************************************************************/\r\n// Constants of the glpairs class\r\n// ***************************************************************/\r\n\r\n// The name of the Identifiery of the Mapping array for external ID 1\r\nGlPairs.C_STR_ARR_ID_EXT_ID1 = 'extID1';\r\n// The name of the Identifiery of the Mapping array for external ID 2\r\nGlPairs.C_STR_ARR_ID_EXT_ID2 = 'extID2';\r\n\r\n// the Pairstype for the same image \r\nGlPairs.C_INT_PAIRS_TYPE_SamePic = 0;\r\n//the Pairstype for two similar images\r\nGlPairs.C_INT_PAIRS_TYPE_2Pic = 1;\r\n//the Pairstype for the image and text pair\r\nGlPairs.C_INT_PAIRS_TYPE_PicText = 2;\r\n//the Pairstype for the text only type\r\nGlPairs.C_INT_PAIRS_TYPE_TextOnly = 3;\r\n\r\n// the identifier of the upper area\r\nGlPairs.C_STR_AREA_UPPER = 'upper';\r\n//the identifier of the lower area\r\nGlPairs.C_STR_AREA_LOWER = 'lower';\r\n\r\n// the default class of the border from a card\r\nGlPairs.C_STR_CARD_BORDER_CLASS_DEFAULT = 'glpairs_cls_card_border';\r\n//the wrong class of the border from a card\r\nGlPairs.C_STR_CARD_BORDER_CLASS_WRONG = 'glpairs_cls_card_border_wrong';\r\n//the right class of the border from a card\r\nGlPairs.C_STR_CARD_BORDER_CLASS_RIGHT = 'glpairs_cls_card_border_right';\r\n\r\n// identifier for the ID suffix of the front card\r\nGlPairs.C_STR_ID_SUFFIX_FRONT = 'div_card_front';\r\n//identifier for the ID suffix of the back card\r\nGlPairs.C_STR_ID_SUFFIX_BACK = 'div_card_back';\r\n//identifier for the ID suffix of the result element\r\nGlPairs.C_STR_ID_SUFFIX_RESULT = 'glpairs_result';\r\n//identifier for the ID suffix of the border element\r\nGlPairs.C_STR_ID_SUFFIX_FRONT_CARD = 'front_card';\r\n//identifier for the ID suffix of the TD element which contains the whole card data\r\nGlPairs.C_STR_ID_SUFFIX_TD_CONTAINER = 'td_card';\r\n//identifier for the ID suffix of the div element from the front card\r\nGlPairs.C_STR_ID_SUFFIX_TD_CONTAINER = 'td_card';\r\n//identifier for the ID suffix of the card stack\r\nGlPairs.C_STR_ID_SUFFIX_CARD_STACK = 'glpairs_card_stack';\r\n//identifier for the ID suffix of the container for the whole card\r\nGlPairs.C_STR_ID_SUFFIX_CARD_OVERALL = 'overall_card';\r\n//identifier for the ID suffix of the img of the back card\r\nGlPairs.C_STR_ID_SUFFIX_IMG_BACK = 'img_back';\r\n//identifier for the ID suffix of the ckick hint box\r\nGlPairs.C_STR_ID_SUFFIX_CLICK_HINT = 'glpairs_click_hint';\r\n\r\n\r\n// ***************************************************************/\r\n// Static attributes of the glpairs class\r\n// ***************************************************************/\r\n\r\n//static array with all pairs objects of the current page\r\nGlPairs.arrPairs = [];\r\n\r\n// ***************************************************************/\r\n// Static method/function part\r\n// ***************************************************************/\r\n\r\n/**\r\n * The main init method which is starting all pairs games of the current page\r\n *\r\n * @function\r\n * @memberOf GLPairs\r\n * @param {array} i_arrPairsUniqueIds\tArray with all unique IDs of the \r\n * \t\t\t\t\t\t\t\t\t\tpairs games which should be started.\r\n*/\r\nGlPairs.glpairsInit = function(i_arrPairsUniqueIds) {\r\n\t// turn on the strict mode\r\n\t\"use strict\";\r\n\t// for every unique ID\r\n\tjQuery.each(i_arrPairsUniqueIds,\r\n\t\tfunction(i_intIndex, i_strUniqueId){\r\n\t\t\tvar objPairs = new GlPairs(i_strUniqueId);\r\n\t\t\t\r\n\t\t\t// start initial ajax request\r\n\t\t\tobjPairs.requestAjaxGeneralPairsData();\r\n\t\t}\r\n\t);\t\r\n};\r\n\r\n/**\r\n * static handler for Ajax response\r\n * \r\n * @function\r\n * @memberOf GLPairs\r\n * @param {String} i_strResponseFunc\tFunction to be called for handling the ajax request.\r\n * @param {Object} i_jsonResult\t\t\tJson container with all the received data.\r\n */\r\nGlPairs.glpairsHandleAjaxResponse = function(i_strResponseFunc, i_jsonResult) {\r\n\t// turn on the strict mode\r\n\t\"use strict\";\r\n\t\r\n\t// get the corresponding pairs game object\r\n\tvar objPairs = GlPairs.arrPairs[i_jsonResult.strUniqueId];\r\n\t\r\n\t// unset ajax mode\r\n\tobjPairs.setAjaxWaitParams(false);\r\n\r\n\t// call the specific method which handle the ajax response\r\n\tobjPairs[i_strResponseFunc](i_jsonResult);\r\n};\r\n\r\n/**\r\n * static handler for the events\r\n * \r\n * @function\r\n * @memberOf GLPairs\r\n * @param {integer} i_intUniqueId \t\t\tUnique ID of the pairs game. \r\n * @param {Object} \ti_objEvent\t\t\t\tEvent object.\r\n * @param {String}\ti_strHandler\t\t\tName of the Method which processing the event request.\t\r\n * @param {Object}\t$i_objCurrentElement\tjQuery object this is the element which has received the event.\r\n */\r\nGlPairs.glpairsEventHandler = function(i_intUniqueId, i_objEvent, i_strHandler, $i_objCurrentElement ) {\r\n\t// turn on the strict mode\r\n\t\"use strict\";\r\n\t// get the corresponding pairs game object\r\n\tvar objPairs = GlPairs.arrPairs[i_intUniqueId];\r\n\r\n\t// call the actual event handler\r\n\tobjPairs[i_strHandler](i_objEvent, $i_objCurrentElement);\r\n};\r\n\r\n\r\n//**************************************************************************************** //\r\n//**************************************************************************************** //\r\n// finally start the glpairs plugin for all IDs stored globaly in the array arrGlpairsIds\r\n// if document ready, call the init function of the crossword\r\nGlPairs.glpairsInit(arrGlpairsIds);\r\n//**************************************************************************************** //\r\n//**************************************************************************************** //\r\n"],"sourceRoot":"/source/"}